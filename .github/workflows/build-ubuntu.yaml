name: Build Ubuntu

on:
  workflow_call:
    inputs:
      ref:
        description: "Ref to build"
        required: true
        type: string
      target:
        description: "Build target"
        required: true
        default: "all"
        type: string
    outputs:
      cache_key:
        description: "GH Actions Cache key associated with the built dependencies"
        value: ${{ jobs.build_ubuntu.outputs.cache_key }}

jobs:
  get_dependencies:
    name: "Dependencies"
    uses: ./.github/workflows/dependencies.yaml

  build_ubuntu:
    name: Build [ubuntu] ${{ inputs.ref }} ${{ inputs.target }}
    runs-on: ubuntu-latest
    needs: get_dependencies   
    outputs:
      cache_key: ${{ steps.get_cache_key.outputs.cache_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0
      
      - name: Get commit SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Generate cache key
        id: get_cache_key
        # When restoring from cache fails, it searches for other keys to fall back to.
        # It the given key is a prefix of another key, it will be used. 
        # E.g. "...-all" can fallback to "...-all.t" 
        # Thus do not put the target at the end of the key.
        run: echo "cache_key=cache-${{ inputs.target }}-${{ env.sha }}" >> $GITHUB_OUTPUT

      - uses: actions/cache/restore@v4
        id: build-cache-restore-step
        if: inputs.target != 'all.t' # For unit tests we don't cache build
        with:
          path: |
            build/blazingmq
            deps
          key: ${{ steps.get_cache_key.outputs.cache_key }}
        
      - uses: actions/cache/restore@v4
        if: steps.build-cache-restore-step.outputs.cache-hit != 'true'
        with:
          path: deps
          key: ${{ needs.get_dependencies.outputs.cache_key }}

      - name: Set up dependencies
        if: steps.build-cache-restore-step.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -qy build-essential \
            gdb \
            curl \
            python3.10 \
            python3-pip \
            cmake \
            ninja-build \
            pkg-config \
            bison \
            libfl-dev \
            libbenchmark-dev \
            libgmock-dev \
            libz-dev

      - name: Install cached non packaged dependencies
        if: steps.build-cache-restore-step.outputs.cache-hit != 'true'
        working-directory: deps
        run: ../docker/build_deps.sh

      - name: Build BlazingMQ
        if: steps.build-cache-restore-step.outputs.cache-hit != 'true'
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/opt/bb/lib64/pkgconfig
        run: |
          cmake -S . -B build/blazingmq -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/deps/srcs/bde-tools/BdeBuildSystem/toolchains/linux/gcc-default.cmake \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBDE_BUILD_TARGET_SAFE=ON \
            -DBDE_BUILD_TARGET_64=ON \
            -DBDE_BUILD_TARGET_CPP17=ON \
            -DCMAKE_PREFIX_PATH=${{ github.workspace }}/deps/srcs/bde-tools/BdeBuildSystem \
            -DCMAKE_INSTALL_LIBDIR=lib64
          cmake --build build/blazingmq --parallel 8 --target ${{ inputs.target }}

      - name: Clean-up build directories before caching
        if: steps.build-cache-restore-step.outputs.cache-hit != 'true'
        run: |
          find . -name "*.o" -type f -delete
          find . -name "*.a" -type f -delete

      - name: Run UT [c++]
        if: inputs.target == 'all.t'
        run: |
          cd ${{ github.workspace }}/build/blazingmq
          ctest --output-on-failure -L \^unit\$

      - uses: actions/upload-artifact@v4
        if: inputs.target != 'all.t'
        with:
          path: |
            build/blazingmq
            deps
          name: ${{ steps.get_cache_key.outputs.cache_key }}
          retention-days: 1

      - name: Build Cache Save
        if: steps.build-cache-restore-step.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            build/blazingmq
            deps
          key: ${{ steps.get_cache_key.outputs.cache_key }}
